import java.nio.file.Files
import java.util.stream.Stream

plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'io.github.groovymc.modsdotgroovy' version '1.1.2'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'eclipse'
}

modsDotGroovy {
    dslVersion = '1.1.3'
    platform 'forge'
}

group = 'com.matyrobbrt.simpleminers' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'simpleminers'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    packs {
        compileClasspath += main.output
        resources {
            srcDir 'src/packs/generated'
            exclude '**/.cache/**'
        }
    }
}

final compatMods = [
        'create-328085:4011414',

        'extreme_reactors-250277:3927548',
        'zero_core-247921:3927546',

        'terrablender-563928:3966342',
        'byg-247560:3970266',

        'immersiveengineering-231951:3963698'
]

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.09.18-1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            jvmArg '-Xmx2G'

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'simpleminers'

            mods {
                simpleminers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'simpleminers'

            mods {
                simpleminers {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'simpleminers'

            mods {
                simpleminers {
                    source sourceSets.main
                }
            }
        }

        final dataArgs = ['--mod', 'simpleminers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')]

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args dataArgs

            mods {
                simpleminers {
                    source sourceSets.main
                }
            }
        }

        packsGen {
            parent data
            jvmArg '-Dsimpleminers.enableDPGeneration=true'

            mods {
                simpleminers {
                    source sourceSets.main
                    source sourceSets.packs
                }
            }
            jvmArg "-Dsimpleminers.baseOut=${file('src/packs/generated/')}"

            afterEvaluate {
                getArgs().removeIf { it in dataArgs }
                args '--mod', 'simpleminers', '--all', '--output', file('build/datagenTemp/'),
                        '--existing', file('src/main/resources/')

                for (final pack : file('src/packs/resources').listFiles()) {
                    if (!pack.path.contains('META-INF'))
                        args '--existing', pack
                }
            }
        }
    }
}
tasks.jarJar.enabled = true

findPacks().each { f ->
    final packTask = tasks.create("create${f.capitalize()}Pack", Zip) {
        group = 'build'
        dependsOn('processPacksResources')
        from file("src/packs/resources/${f}")
        from(file("src/packs/generated/${f}")) {
            exclude '.cache/**'
        }
        archiveName = "${f}MinerPack.zip"
        destinationDirectory = project.file('build/libs/packs')
    }
    processResources {
        dependsOn(packTask)
        from(packTask.archiveFile.get()) {
            into 'builtinPacks/'
        }
    }
}

List<String> findPacks() {
    final files = Stream.of(file('src/packs/resources').listFiles())
        .filter { it.isDirectory() && !it.path.contains('META-INF') }
        .map { it.name }
        .toList()
    return files + Files.readString(project.file('src/packs/resources/packs.txt').toPath()).split(',').toList()
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.k-4u.nl' }
    maven { url 'https://modmaven.dev/' }
    maven { url 'https://cursemaven.com' }
    maven { url 'https://maven.moddinginquisition.org/releases' }
}

configurations {
    packsImplementation.extendsFrom(minecraft)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.32'

    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")
    packsImplementation fg.deobf("mekanism:Mekanism:${mekanism_version}")

    compatMods.forEach {
        packsImplementation fg.deobf("curse.maven:$it")
    }

    implementation fg.deobf("com.matyrobbrt.simplegui:simplegui:$simplegui_version")
    jarJar "com.matyrobbrt.simplegui:simplegui:[$simplegui_version,)"

    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    // minecraftLibrary('com.ezylang:EvalEx:3.0.0')
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                'Specification-Title'     : 'SimpleMiners',
                'Specification-Vendor'    : 'Matyrobbrt',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : 'Matyrobbrt',
                'Built-on-Minecraft'      : project.mc_version
        ])
    }
    classifier = 'slim'
}

jar.finalizedBy('reobfJar')
reobf {
    jarJar {}
}
java.withSourcesJar()

tasks.named('jarJar').configure {
    it.finalizedBy('reobfJarJar')
    it.classifier = ''
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifacts = [tasks.jarJar, sourcesJar]
            artifactId = 'simpleminers'
        }
    }
    repositories {
        maven {
            name = 'ModdingInquisitionMavenRepo'
            url = 'https://maven.moddinginquisition.org/releases'
            credentials {
                username = findProperty('inquisitionMavenUser') ?: ''
                password = findProperty('inquisitionMavenPassword') ?: ''
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}